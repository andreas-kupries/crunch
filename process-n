#!/usr/bin/env tclsh
# -*- tcl -*-

# Arguments.
#
# n - number of revisions to process before aborting
#
# state - database holding processing state for easy restart after an
#         abort. I.e. restart at point of abort, without re-doing the
#	  completed parts. database is created if not existing.
#
# repo  - fossil repository we are working from.
#
# cmd   - Command run per revision. List. Contains command and arguments.

# Results.
#
# * Runs the command per revision.
# * CWD/src - Checkout of the current revision.

package require Tcl 8.5
package require sqlite3

if {[llength $argv] < 4} {
    puts stderr "Usage: $argv0 n state repository cmd ..."
    exit 1
}

set cargs [lassign $argv n state repo cmd]
set cmd   [file normalize $cmd]

if {![file exists $repo]} {
    puts stderr "Usage: $argv0 n state repository cmd ...\nrepository $repo does not exist"
    exit 1
}

# # ## ### ##### ######## ############# ##################### ##################################

source [file dirname [file normalize [info script]]]/lib/crunch.tcl

# # ## ### ##### ######## ############# ##################### ##################################

puts "callout: $cmd R UUID $cargs"

crunch repository $repo
crunch state      $state
crunch setup

set count 0

foreach uuid [crunch filter [crunch revisions all]] {
    crunch goto $uuid

    puts processing...

    set xcmd [list $cmd $repo $uuid {*}$cargs]

    if {![catch {
	exec >@ stdout 2>@ stderr {*}$xcmd
    } msg]} {
	crunch mark $uuid
    } else {
	puts "FAIL: $msg"
	break
    }

    incr count

    if {$count >= $n} break
}

crunch complete

puts "processed: $count"
exit 0
